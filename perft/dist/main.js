(()=>{"use strict";var e,t,i,a;(a=e||(e={})).White="WHITE",a.Black="BLACK",(i=t||(t={})).Bishop="BISHOP",i.King="KING",i.Knight="KNIGHT",i.Pawn="PAWN",i.Queen="QUEEN",i.Rook="ROOK";const n=Object.freeze({[e.White]:{queenside:0,kingside:7},[e.Black]:{queenside:56,kingside:63}}),o=Object.freeze({[e.White]:{kingside:!1,queenside:!1},[e.Black]:{kingside:!1,queenside:!1}}),s=Object.freeze({b:t.Bishop,B:t.Bishop,k:t.King,K:t.King,n:t.Knight,N:t.Knight,p:t.Pawn,P:t.Pawn,q:t.Queen,Q:t.Queen,r:t.Rook,R:t.Rook}),r=Object.freeze({[t.Bishop]:"b",[t.King]:"k",[t.Knight]:"n",[t.Pawn]:"p",[t.Queen]:"q",[t.Rook]:"r"}),c=[["a8","b8","c8","d8","e8","f8","g8","h8"],["a7","b7","c7","d7","e7","f7","g7","h7"],["a6","b6","c6","d6","e6","f6","g6","h6"],["a5","b5","c5","d5","e5","f5","g5","h5"],["a4","b4","c4","d4","e4","f4","g4","h4"],["a3","b3","c3","d3","e3","f3","g3","h3"],["a2","b2","c2","d2","e2","f2","g2","h2"],["a1","b1","c1","d1","e1","f1","g1","h1"]].reverse().flat(),l=({rank:e,file:t})=>8*e+t,p=e=>c[e],u=e=>c.indexOf(e),g=t=>t===e.White?e.Black:e.White,k=(e,t="")=>{return e.promotion?`${p(e.from)}${t}${p(e.to)}${i=e.promotion,r[i]}`:`${p(e.from)}${t}${p(e.to)}`;var i},f=(t,i)=>t===e.White?i>=8&&i<16:i>=48&&i<56,h=(e,i)=>{for(const[a,n]of e.pieces)if(n.type===t.King&&n.color===i)return a},d=t=>{const i=new Map;for(const[e,a]of t.pieces)i.set(e,a);const a={[e.White]:{kingside:t.castlingAvailability[e.White].kingside,queenside:t.castlingAvailability[e.White].queenside},[e.Black]:{kingside:t.castlingAvailability[e.Black].kingside,queenside:t.castlingAvailability[e.Black].queenside}};return{pieces:i,turn:t.turn,castlingAvailability:a,enPassantSquare:t.enPassantSquare,halfMoveCount:t.halfMoveCount,fullMoveCount:t.fullMoveCount}},B=t=>{const i=new Map;let a=7,n=0;for(const r of t)switch(r){case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":n+=Number(r);break;case"/":a-=1,n=0;break;case"b":case"B":case"k":case"K":case"n":case"N":case"p":case"P":case"q":case"Q":case"r":case"R":i.set(l({rank:a,file:n}),{color:(o=r,"PNBRQK".includes(o)?e.White:e.Black),type:s[r]}),n+=1}var o;return i},y=(BigInt(0),BigInt(1)),v=BigInt(2),q=BigInt(4),b=BigInt(8),m=BigInt(16),I=BigInt(32),S=BigInt(64),P=BigInt(128),A=BigInt(256),W=BigInt(512),K=BigInt(1024),M=BigInt(2048),w=BigInt(4096),_=BigInt(8192),O=BigInt(16384),R=BigInt(32768),C=BigInt(65536),Q=BigInt(131072),x=BigInt(262144),E=BigInt(524288),N=BigInt(1048576),T=BigInt(2097152),$=BigInt(4194304),j=BigInt(8388608),z=BigInt(16777216),L=BigInt(33554432),H=BigInt(67108864),G=BigInt(134217728),F=BigInt(268435456),U=BigInt(536870912),D=BigInt(1073741824),J=BigInt(2147483648),V=BigInt(4294967296),X=BigInt(8589934592),Y=BigInt(17179869184),Z=BigInt(34359738368),ee=BigInt(68719476736),te=BigInt(137438953472),ie=BigInt(274877906944),ae=BigInt(549755813888),ne=BigInt(1099511627776),oe=BigInt(2199023255552),se=BigInt(4398046511104),re=BigInt(8796093022208),ce=BigInt(17592186044416),le=BigInt(35184372088832),pe=BigInt(70368744177664),ue=BigInt(0x800000000000),ge=BigInt(281474976710656),ke=BigInt(562949953421312),fe=BigInt(0x4000000000000),he=BigInt(0x8000000000000),de=BigInt(4503599627370496),Be=BigInt(9007199254740992),ye=BigInt(0x40000000000000),ve=BigInt(0x80000000000000),qe=BigInt(72057594037927940),be=BigInt(0x200000000000000),me=BigInt(0x400000000000000),Ie=BigInt(0x800000000000000),Se=BigInt(0x1000000000000000),Pe=BigInt(0x2000000000000000),Ae=BigInt(0x4000000000000000),We=BigInt(0x8000000000000000),Ke=[y,A,C,z,V,ne,ge,qe,v,W,Q,L,X,oe,ke,be,q,K,x,H,Y,se,fe,me,b,M,E,G,Z,re,he,Ie,m,w,N,F,ee,ce,de,Se,I,_,T,U,te,le,Be,Pe,S,O,$,D,ie,pe,ye,Ae,P,R,j,J,ae,ue,ve,We],Me=(Object.freeze({a1:y,a2:A,a3:C,a4:z,a5:V,a6:ne,a7:ge,a8:qe,b1:v,b2:W,b3:Q,b4:L,b5:X,b6:oe,b7:ke,b8:be,c1:q,c2:K,c3:x,c4:H,c5:Y,c6:se,c7:fe,c8:me,d1:b,d2:M,d3:E,d4:G,d5:Z,d6:re,d7:he,d8:Ie,e1:m,e2:w,e3:N,e4:F,e5:ee,e6:ce,e7:de,e8:Se,f1:I,f2:_,f3:T,f4:U,f5:te,f6:le,f7:Be,f8:Pe,g1:S,g2:O,g3:$,g4:D,g5:ie,g6:pe,g7:ye,g8:Ae,h1:P,h2:R,h3:j,h4:J,h5:ae,h6:ue,h7:ve,h8:We}),({rank:e,file:t})=>e>=0&&e<8&&t>=0&&t<8),we=(e,t=1)=>({rank:e.rank+t,file:e.file}),_e=(e,t=1)=>({rank:e.rank-t,file:e.file}),Oe=(e,t=1)=>({rank:e.rank,file:e.file-t}),Re=(e,t=1)=>({rank:e.rank,file:e.file+t}),Ce=(e,t=1)=>we(Oe(e,t),t),Qe=(e,t=1)=>we(Re(e,t),t),xe=(e,t=1)=>_e(Oe(e,t),t),Ee=(e,t=1)=>_e(Re(e,t),t),Ne=(e,t)=>{const i=[];for(const a of function*(e,t){for(;Me(e);)yield e,e=t(e)}(t(e),t))i.push(a);return i},Te=e=>[we(Oe(e),2),we(Re(e),2),Oe(we(e),2),Oe(_e(e),2),_e(Oe(e),2),_e(Re(e),2),Re(we(e),2),Re(_e(e),2)].filter((e=>Me(e))).map((e=>l(e))),$e=e=>[Ce,Qe,xe,Ee].map((t=>Ne(e,t))).map((e=>e.map((e=>l(e))))),je=e=>[we,Re,Oe,_e].map((t=>Ne(e,t))).map((e=>e.map((e=>l(e))))),ze=[],Le=[],He=[],Ge=[],Fe=[],Ue=[],De=[];for(const{rank:e,file:i}of function*(){for(let e=0;e<8;e++)for(let t=0;t<8;t++)yield{rank:e,file:t}}()){const a=l({rank:e,file:i});ze[a]=$e({rank:e,file:i}),He[a]=[we(Je={rank:e,file:i}),Oe(Je),Re(Je),_e(Je),Ce(Je),Qe(Je),xe(Je),Ee(Je)].filter((e=>Me(e))).map((e=>l(e))),Le[a]=Te({rank:e,file:i}),Ge[a]=je({rank:e,file:i}),Fe[a]=[...$e({rank:e,file:i}),...je({rank:e,file:i})],Ue[a]=[...ze[a].map((e=>({type:t.Bishop,ray:e}))),...Ge[a].map((e=>({type:t.Rook,ray:e})))],De[a]=[...ze[a].flat(),...Ge[a].flat(),...Le[a],...He[a]]}var Je;const Ve=ze.map((e=>e.flat())),Xe=Ge.map((e=>e.flat())),Ye=Fe.map((e=>e.flat())),Ze=(Ve.map((e=>{const t=Array(64);return e.forEach((e=>t[e]=!0)),t})),Xe.map((e=>{const t=Array(64);return e.forEach((e=>t[e]=!0)),t})),Ye.map((e=>{const t=Array(64);return e.forEach((e=>t[e]=!0)),t}))),et=(De.map((e=>{const t=Array(64);return e.forEach((e=>t[e]=!0)),t})),Ye.map((e=>e.reduce(((e,t)=>e|Ke[t]),BigInt(0)))),(e,t=1)=>e+8*t),tt=(e,t=1)=>e-8*t,it=(e,t=1)=>e-1*t,at=(e,t=1)=>e+1*t,nt=(e,t,i,{skip:a=[]})=>{const n=[],o=t.square;let s;for(const r of i){if(a.includes(r)){n.push({from:o,to:r,piece:t.piece});continue}const i=e.get(r);if(i){if(i.color===t.piece.color)break;s={attacked:{square:r,type:i.type},attacker:{square:o,type:t.piece.type},slideSquares:n.map((({to:e})=>e))},n.push({from:o,to:r,piece:t.piece,attack:s});break}n.push({from:o,to:r,piece:t.piece})}return n},ot=(i,a,n,{attacksOnly:o,advanceOnly:s,enPassantSquare:r})=>{let c=[];const l=g(a),p=a===e.White?et:tt,u=a===e.White?tt:et;var k;if(!o&&(k=p(n))>=0&&k<64&&!i.get(p(n))&&(c.push({from:n,to:p(n),piece:{type:t.Pawn,color:a}}),!i.get(p(n,2))&&f(a,n)&&c.push({from:n,to:p(n,2),piece:{type:t.Pawn,color:a}})),!s){const e=p(it(n)),o=p(at(n)),s=e===r?i.get(u(r)):i.get(e),g=o===r?i.get(u(r)):i.get(o);e%8!=7&&s?.color===l&&c.push({from:n,to:e,piece:{type:t.Pawn,color:a},attack:{attacker:{square:n,type:t.Pawn},attacked:{square:e,type:s.type},slideSquares:[]}}),o%8!=0&&g?.color===l&&c.push({from:n,to:o,piece:{type:t.Pawn,color:a},attack:{attacker:{square:n,type:t.Pawn},attacked:{square:o,type:g.type},slideSquares:[]}})}return((e,t)=>f(g(e),t))(a,n)&&(c=c.flatMap((e=>[t.Bishop,t.Knight,t.Queen,t.Rook].map((t=>({...e,promotion:t})))))),c},st=(e,i,a)=>Le[a].filter((t=>e.get(t)?.color!==i)).map((n=>{let o;const s=e.get(n);return s&&(o={attacker:{square:a,type:t.Knight},attacked:{square:n,type:s.type},slideSquares:[]}),{from:a,to:n,piece:{type:t.Knight,color:i},attack:o}})),rt=(e,i,a,{castlingOnly:n,castlingAvailability:o,pieceAttacks:s})=>{const r=n?[]:He[a].filter((t=>e.get(t)?.color!==i));return!o[i].kingside||e.get(at(a))||0!==pt(e,g(i),at(a),{enPassantSquare:null,skip:[a]}).length||e.get(at(a,2))||r.push(at(a,2)),!o[i].queenside||e.get(it(a))||0!==pt(e,g(i),it(a),{enPassantSquare:null,skip:[a]}).length||e.get(it(a,2))||e.get(it(a,3))||r.push(it(a,2)),r.map((n=>{let o;const s=e.get(n);return s&&(o={attacker:{square:a,type:t.King},attacked:{square:n,type:s.type},slideSquares:[]}),{from:a,to:n,piece:{type:t.King,color:i},attack:o}}))},ct=(e,i,a,{skip:n=[]})=>ze[a].flatMap((o=>nt(e,{square:a,piece:{color:i,type:t.Bishop}},o,{skip:n}))),lt=(e,i,a,{skip:n=[]})=>Ge[a].flatMap((o=>nt(e,{square:a,piece:{color:i,type:t.Rook}},o,{skip:n}))),pt=(i,a,n,{enPassantSquare:s,skip:r})=>{const c=[],l=g(a),p=[rt(i,l,n,{castlingOnly:!1,castlingAvailability:o,pieceAttacks:{[e.White]:new Map,[e.Black]:new Map}}),ct(i,l,n,{skip:r}),lt(i,l,n,{skip:r}),st(i,l,n),ot(i,l,n,{advanceOnly:!1,attacksOnly:!0,enPassantSquare:s})];for(const e of p)for(const a of e)if(a.attack){const e=i.get(a.to);a.attack.attacker.type===t.Bishop||a.attack.attacker.type===t.Rook?!e||e.type!==a.attack.attacker.type&&e.type!==t.Queen||c.push({attacked:a.attack.attacker,attacker:a.attack.attacked,slideSquares:a.attack.slideSquares}):e&&e.type===a.attack.attacker.type&&c.push({attacked:a.attack.attacker,attacker:a.attack.attacked,slideSquares:a.attack.slideSquares})}return c},ut=(e,t)=>{const i=new Map;for(let e=0;e<64;e++)i.set(e,[]);for(let a=0;a<64;a++){const n=pt(e,t,a,{enPassantSquare:null,skip:[]});for(const e of n){const t=i.get(e.attacker.square);if(!t)throw Error("cant be possible");t.push({square:a,attacker:e.attacker,slideSquares:e.slideSquares})}}return i},gt=(e,t)=>{const i=new Map;for(let a=0;a<64;a++){i.set(a,0);const n=pt(e,t,a,{enPassantSquare:null,skip:[]});i.set(a,n.length)}return i},kt=(t,i,a)=>{const n=i[e.White],o=i[e.Black];let s;return n&&(s=pt(t,e.Black,n,{...a,skip:[n]})),o&&(s=pt(t,e.White,o,{...a,skip:[o]})),{[e.White]:s||[],[e.Black]:[]}},ft=[[-5,-2,0,0,0,0,-2,-5],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,5,1,1,1,1,5,1],[1,1,6,1,1,6,1,1],[1,1,1,6,6,1,1,1],[2,8,-1,8,8,-1,8,2],[4,2,-2,-5,-5,-2,2,4]],ht=[[-10,-10,-10,-10,-10,-10,-10,-10],[-10,-10,-10,-10,-10,-10,-10,-10],[-10,-10,-10,-10,-10,-10,-10,-10],[0,-2,-5,-10,-10,-5,-2,0],[0,-2,-5,-10,-10,-5,-2,0],[0,0,-2,-10,-10,-2,0,0],[1,1,1,-10,-10,1,1,1],[5,5,10,-8,-8,5,10,5]],dt=[[-10,0,0,0,0,0,0,-10],[1,1,1,1,1,1,1,1],[-1,1,2,1,1,2,1,-1],[0,4,4,4,4,4,4,0],[0,1,2,4,4,2,1,0],[-1,1,10,1,1,10,1,-1],[-5,-1,1,6,6,1,-1,-5],[-10,-5,-1,0,0,-1,-5,-10]],Bt=[[0,0,0,0,0,0,0,0],[10,10,10,10,10,10,10,10],[6,1,5,7,7,5,1,6],[5,1,4,6,6,4,1,5],[4,1,1,5,5,1,1,4],[1,1,1,1,1,-3,1,1],[1,5,5,-10,-10,5,5,1],[0,0,0,0,0,0,0,0]],yt=[[-5,-2,0,0,0,0,-2,-5],[1,1,1,2,2,1,1,1],[1,1,2,6,6,2,1,1],[1,2,6,5,5,6,2,1],[1,2,6,8,8,6,2,1],[1,5,2,6,6,5,1,1],[2,1,5,2,5,-1,1,1],[-5,-2,-2,-1,-1,-2,-2,-5]],vt=[[5,5,5,5,5,5,5,5],[10,10,10,10,10,10,10,10],[0,0,0,0,0,0,0,0],[1,0,-2,-1,-1,-2,0,1],[1,0,-2,-1,-1,-2,0,1],[4,0,0,4,0,4,0,4],[0,0,0,1,1,0,0,0],[2,4,6,10,10,8,4,2]],qt={[t.Bishop]:{[e.White]:[...ft].reverse().flat(),[e.Black]:[...ft].flat()},[t.Knight]:{[e.White]:[...dt].reverse().flat(),[e.Black]:[...dt].flat()},[t.King]:{[e.White]:[...ht].reverse().flat(),[e.Black]:[...ht].flat()},[t.Pawn]:{[e.White]:[...Bt].reverse().flat(),[e.Black]:[...Bt].flat()},[t.Queen]:{[e.White]:[...yt].reverse().flat(),[e.Black]:[...yt].flat()},[t.Rook]:{[e.White]:[...vt].reverse().flat(),[e.Black]:[...vt].flat()}},bt=Object.freeze({[t.Bishop]:300,[t.King]:1/0,[t.Knight]:300,[t.Pawn]:100,[t.Queen]:900,[t.Rook]:500}),mt=t=>t===e.White?1:-1,It=(e,t)=>qt[t.type][t.color][e],St=(e,i,a)=>{const n=new Map,o=Ue[i];for(const{type:i,ray:s}of o){const o=[],r=[];let c;for(const t of s){const i=e.get(t);if(i){if(i.color!==a){c={square:t,piece:i};break}o.push(t)}else r.push(t)}!c||c.piece.type!==i&&c.piece.type!==t.Queen||1===o.length&&n.set(o[0],{pinned:o[0],attacker:c.square,legalMoveSquares:[...r,...o]})}return n},Pt=(e,i,a,{enPassantSquare:n,castlingAvailability:o,pieceAttacks:s})=>{const r=[];switch(i.type){case t.Bishop:r.push(...ct(e,i.color,a,{skip:[]}));break;case t.King:r.push(...rt(e,i.color,a,{castlingOnly:!1,castlingAvailability:o,pieceAttacks:s}));break;case t.Knight:r.push(...st(e,i.color,a));break;case t.Pawn:r.push(...ot(e,i.color,a,{attacksOnly:!1,advanceOnly:!1,enPassantSquare:n}));break;case t.Queen:r.push(...((e,t,i,a)=>[...ct(e,t,i,a),...lt(e,t,i,a)])(e,i.color,a,{skip:[]}));break;case t.Rook:r.push(...lt(e,i.color,a,{skip:[]}))}return r},At=(e,i,{ignoreKing:a})=>{if(a&&i.piece.type===t.King)return!0;if(1===e.length){const t=e[0];return n=t.slideSquares,o=i.to,n.includes(o)||t.attacker.square===i.to}if(2===e.length)return!1;throw Error(`called with ${e.length} not exactly 1 or 2 checks`);var n,o},Wt=(e,t,i,a,n,o)=>{if(o){if(a.from===i)return 0===o.get(a.to);{const e=n.get(a.from);return!e||e.legalMoveSquares.includes(a.to)||a.to===e.attacker}}if(a.from===i)return 0===pt(e,g(t),a.to,{enPassantSquare:null,skip:[i]}).length;{const e=n.get(a.from);return!e||e.legalMoveSquares.includes(a.to)||a.to===e.attacker}},Kt=t=>(t=>{const i=h(t,e.White),a=h(t,e.Black),n={[e.White]:i,[e.Black]:a},o={[e.White]:ut(t.pieces,e.White),[e.Black]:ut(t.pieces,e.Black)},s={[e.White]:gt(t.pieces,e.White),[e.Black]:gt(t.pieces,e.Black)},r=((t,i)=>{const a=i[e.White],n=i[e.Black];let o,s;return a&&(o=St(t,a,e.White)),n&&(s=St(t,n,e.Black)),{[e.White]:o||new Map,[e.Black]:s||new Map}})(t.pieces,n),c=kt(t.pieces,n,{enPassantSquare:t.enPassantSquare,castlingAvailability:t.castlingAvailability});return{...t,kings:n,pieceAttacks:o,attackedSquares:s,checks:c,pinsToKing:r}})(d(t)),Mt=(e,t)=>{const i=e.generateMoves();if(0===t)return 1;if(1===t)return i.length;let a=0;for(const n of i)e.applyMove(n),a+=Mt(e,t-1),e.undoLastMove();return a},wt=(new Intl.NumberFormat,require("process")),[,,_t,Ot,Rt]=wt.argv,Ct=(t=>{const[i,a,n,o,s,r]=t.split(" ");return Object.freeze({pieces:B(i),turn:"w"===a?e.White:e.Black,castlingAvailability:Object.freeze({[e.White]:{kingside:n.includes("K"),queenside:n.includes("Q")},[e.Black]:{kingside:n.includes("k"),queenside:n.includes("q")}}),enPassantSquare:"-"!==o?u(o):null,halfMoveCount:Number(s),fullMoveCount:Number(r)})})(Ot),Qt=0===Rt.length?[]:Rt.split(" ").map((e=>(e=>{const t=e.slice(0,2),i=e.slice(2,4),a=e.slice(4,5),n={from:u(t),to:u(i)};return a.length>0&&(n.promotion=s[a]),n})(e))),xt=new class{constructor(e){this._moveStack=[],this._position=Kt(e)}applyMove(i){const a=((i,a)=>{const{pieces:o}=i;let s=i.pieces.get(a.from);if(!s)throw Error("no piece to move");if(s.color!==i.turn)throw Error("cannot move piece for other color");const r={move:a,previousState:{castlingAvailability:{[e.White]:{kingside:i.castlingAvailability[e.White].kingside,queenside:i.castlingAvailability[e.White].queenside},[e.Black]:{kingside:i.castlingAvailability[e.Black].kingside,queenside:i.castlingAvailability[e.Black].queenside}},enPassantSquare:i.enPassantSquare,halfMoveCount:i.halfMoveCount,pinsToKing:{...i.pinsToKing},checks:{...i.checks}}};a.promotion&&(s={...s,type:a.promotion});let c=o.get(a.to);if(c&&(r.captured={square:a.to,piece:c}),o.delete(a.from),o.set(a.to,s),c&&c.type===t.Rook&&(a.to===n[c.color].queenside?i.castlingAvailability[c.color].queenside=!1:a.to===n[c.color].kingside&&(i.castlingAvailability[c.color].kingside=!1)),s.type===t.Pawn&&i.enPassantSquare===a.to){const t=s.color===e.White?tt(a.to):et(a.to);if(c=o.get(t),!c)throw Error("no piece captured with en passant capture");r.captured={square:t,piece:c},o.delete(t)}if(((i,a)=>!(i.type!==t.Pawn||!f(i.color,a.from))&&(i.color===e.White?a.to>=24&&a.to<32:a.to>=32&&a.to<40))(s,a)?i.enPassantSquare=s.color===e.White?et(a.from):tt(a.from):i.enPassantSquare=null,s.type===t.King)if(i.kings[s.color]=a.to,i.castlingAvailability[s.color].queenside=!1,i.castlingAvailability[s.color].kingside=!1,a.from-a.to==2){const a=n[s.color].queenside,o=s.color===e.White?3:59;i.pieces.delete(a),i.pieces.set(o,{color:s.color,type:t.Rook})}else if(a.from-a.to==-2){const a=n[s.color].kingside,o=s.color===e.White?5:61;i.pieces.delete(a),i.pieces.set(o,{color:s.color,type:t.Rook})}return s.type===t.Rook&&(a.from===n[s.color].queenside?i.castlingAvailability[s.color].queenside=!1:a.from===n[s.color].kingside&&(i.castlingAvailability[s.color].kingside=!1)),((e,i,a,n,o,s)=>{const r=a[n],c=a[g(n)];r&&(s.type===t.King||Ze[r][o.from]||Ze[r][o.to])&&(e[n]=St(i,r,n)),c&&(Ze[c][o.from]||Ze[c][o.to])&&(e[g(n)]=St(i,c,g(n)))})(i.pinsToKing,i.pieces,i.kings,i.turn,a,s),i.turn===e.Black&&i.fullMoveCount++,s.type===t.Pawn||c?i.halfMoveCount=0:i.halfMoveCount++,i.turn=g(i.turn),r})(this._position,i);return this._moveStack.push(a),a.captured?.piece}undoLastMove(){const i=this._moveStack.pop();if(!i)throw Error("no last move to undo");((i,a)=>{const{move:o}=a;let s=i.pieces.get(o.to);if(!s)throw Error("no piece to unmove");if(o.promotion&&(s={type:t.Pawn,color:s.color}),i.pieces.set(o.from,s),i.pieces.delete(o.to),a.captured&&i.pieces.set(a.captured.square,a.captured.piece),s.type===t.King)if(i.kings[s.color]=o.from,o.from-o.to==2){const a=n[s.color].queenside,o=s.color===e.White?3:59;i.pieces.delete(o),i.pieces.set(a,{color:s.color,type:t.Rook})}else if(o.from-o.to==-2){const a=n[s.color].kingside,o=s.color===e.White?5:61;i.pieces.delete(o),i.pieces.set(a,{color:s.color,type:t.Rook})}i.turn===e.White&&i.fullMoveCount--,i.turn=g(i.turn),i.castlingAvailability=a.previousState.castlingAvailability,i.enPassantSquare=a.previousState.enPassantSquare,i.halfMoveCount=a.previousState.halfMoveCount,i.pinsToKing=a.previousState.pinsToKing,i.checks=a.previousState.checks})(this._position,i)}evaluate(){return(e=>{let i=0;for(const[a,n]of e.pieces)n.type!==t.King&&(i+=(bt[n.type]+It(a,n))*mt(n.color));return i+=20*mt(e.turn),i/100})(this._position)}evaluateNormalized(){return this._position.turn===e.White?this.evaluate():-1*this.evaluate()}generateMoves(){return((e,t,{attackedSquares:i,pieceAttacks:a,pinsToKing:n,kings:s,enPassantSquare:r,castlingAvailability:c})=>{let l=[];const p=s[t];p&&(l=pt(e,g(t),p,{enPassantSquare:r,skip:[p]}));const u=((e,t)=>{const i=[],{color:a,enPassantSquare:n,castlingAvailability:o,pieceAttacks:s}=t;for(const[t,r]of e.entries())a&&r.color!==a||i.push(...Pt(e,r,t,{enPassantSquare:n,castlingAvailability:o,pieceAttacks:s}));return i})(e,{color:t,enPassantSquare:r,castlingAvailability:l.length>0?o:c,pieceAttacks:a});if(p)for(let i=u.length-1;i>=0;i--){const a=u[i];l.length>0&&(At(l,a,{ignoreKing:!0})||u.splice(i,1)),Wt(e,t,p,a,n[t])||u.splice(i,1)}return u})(this._position.pieces,this._position.turn,{attackedSquares:this._position.attackedSquares,pieceAttacks:this._position.pieceAttacks,pinsToKing:this._position.pinsToKing,checks:this._position.checks,kings:this._position.kings,enPassantSquare:this._position.enPassantSquare,castlingAvailability:this._position.castlingAvailability})}get position(){return(e=>d((e=>{const{pieces:t,turn:i,castlingAvailability:a,enPassantSquare:n,halfMoveCount:o,fullMoveCount:s}=e;return{pieces:t,turn:i,castlingAvailability:a,enPassantSquare:n,halfMoveCount:o,fullMoveCount:s}})(e)))(this._position)}set position(e){this._position=Kt(e),this._moveStack=[]}get checks(){return kt(this._position.pieces,this._position.kings,{enPassantSquare:this._position.enPassantSquare,castlingAvailability:this._position.castlingAvailability})}get attacks(){return{[e.White]:gt(this._position.pieces,e.White),[e.Black]:gt(this._position.pieces,e.Black)}}get pins(){return[...Array.from(this._position.pinsToKing[e.White].values()),...Array.from(this._position.pinsToKing[e.Black].values())]}}(Ct);for(const e of Qt)xt.applyMove(e);const Et=((e,t)=>{if(0===t)return{counter:1,counts:{}};const i={},a=e.generateMoves();for(const n of a)e.applyMove(n),i[k(n,"")]=Mt(e,t-1),e.undoLastMove();return{counter:Object.values(i).reduce(((e,t)=>e+t),0),counts:i}})(xt,Number(_t));for(const[e,t]of Object.entries(Et.counts))console.log(`${e} ${t}`);console.log(`\n${Et.counter}`)})();