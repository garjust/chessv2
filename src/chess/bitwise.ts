import { Color, Position } from './types';
import { squareLabel } from './utils';

const a1 = BigInt(0b1);
const a2 = BigInt(0b10);
const a3 = BigInt(0b100);
const a4 = BigInt(0b1000);
const a5 = BigInt(0b10000);
const a6 = BigInt(0b100000);
const a7 = BigInt(0b1000000);
const a8 = BigInt(0b10000000);
const b1 = BigInt(0b100000000);
const b2 = BigInt(0b1000000000);
const b3 = BigInt(0b10000000000);
const b4 = BigInt(0b100000000000);
const b5 = BigInt(0b1000000000000);
const b6 = BigInt(0b10000000000000);
const b7 = BigInt(0b100000000000000);
const b8 = BigInt(0b1000000000000000);
const c1 = BigInt(0b10000000000000000);
const c2 = BigInt(0b100000000000000000);
const c3 = BigInt(0b1000000000000000000);
const c4 = BigInt(0b10000000000000000000);
const c5 = BigInt(0b100000000000000000000);
const c6 = BigInt(0b1000000000000000000000);
const c7 = BigInt(0b10000000000000000000000);
const c8 = BigInt(0b100000000000000000000000);
const d1 = BigInt(0b1000000000000000000000000);
const d2 = BigInt(0b10000000000000000000000000);
const d3 = BigInt(0b100000000000000000000000000);
const d4 = BigInt(0b1000000000000000000000000000);
const d5 = BigInt(0b10000000000000000000000000000);
const d6 = BigInt(0b100000000000000000000000000000);
const d7 = BigInt(0b1000000000000000000000000000000);
const d8 = BigInt(0b10000000000000000000000000000000);
const e1 = BigInt(0b100000000000000000000000000000000);
const e2 = BigInt(0b1000000000000000000000000000000000);
const e3 = BigInt(0b10000000000000000000000000000000000);
const e4 = BigInt(0b100000000000000000000000000000000000);
const e5 = BigInt(0b1000000000000000000000000000000000000);
const e6 = BigInt(0b10000000000000000000000000000000000000);
const e7 = BigInt(0b100000000000000000000000000000000000000);
const e8 = BigInt(0b1000000000000000000000000000000000000000);
const f1 = BigInt(0b10000000000000000000000000000000000000000);
const f2 = BigInt(0b100000000000000000000000000000000000000000);
const f3 = BigInt(0b1000000000000000000000000000000000000000000);
const f4 = BigInt(0b10000000000000000000000000000000000000000000);
const f5 = BigInt(0b100000000000000000000000000000000000000000000);
const f6 = BigInt(0b1000000000000000000000000000000000000000000000);
const f7 = BigInt(0b10000000000000000000000000000000000000000000000);
const f8 = BigInt(0b100000000000000000000000000000000000000000000000);
const g1 = BigInt(0b1000000000000000000000000000000000000000000000000);
const g2 = BigInt(0b10000000000000000000000000000000000000000000000000);
const g3 = BigInt(0b100000000000000000000000000000000000000000000000000);
const g4 = BigInt(0b1000000000000000000000000000000000000000000000000000);
const g5 = BigInt(0b10000000000000000000000000000000000000000000000000000);
const g6 = BigInt(0b100000000000000000000000000000000000000000000000000000);
const g7 = BigInt(0b1000000000000000000000000000000000000000000000000000000);
const g8 = BigInt(0b10000000000000000000000000000000000000000000000000000000);
const h1 = BigInt(0b100000000000000000000000000000000000000000000000000000000);
const h2 = BigInt(0b1000000000000000000000000000000000000000000000000000000000);
const h3 =
  BigInt(0b10000000000000000000000000000000000000000000000000000000000);
const h4 =
  BigInt(0b100000000000000000000000000000000000000000000000000000000000);
const h5 =
  BigInt(0b1000000000000000000000000000000000000000000000000000000000000);
const h6 =
  BigInt(0b10000000000000000000000000000000000000000000000000000000000000);
const h7 =
  BigInt(0b100000000000000000000000000000000000000000000000000000000000000);
const h8 =
  BigInt(0b1000000000000000000000000000000000000000000000000000000000000000);

const Bitmasks: Record<string, bigint> = {
  a1,
  a2,
  a3,
  a4,
  a5,
  a6,
  a7,
  a8,
  b1,
  b2,
  b3,
  b4,
  b5,
  b6,
  b7,
  b8,
  c1,
  c2,
  c3,
  c4,
  c5,
  c6,
  c7,
  c8,
  d1,
  d2,
  d3,
  d4,
  d5,
  d6,
  d7,
  d8,
  e1,
  e2,
  e3,
  e4,
  e5,
  e6,
  e7,
  e8,
  f1,
  f2,
  f3,
  f4,
  f5,
  f6,
  f7,
  f8,
  g1,
  g2,
  g3,
  g4,
  g5,
  g6,
  g7,
  g8,
  h1,
  h2,
  h3,
  h4,
  h5,
  h6,
  h7,
  h8,
};

export const pieceMap = (position: Position, color?: Color): bigint => {
  let n = BigInt(0b0);

  for (const [square, piece] of position.pieces.entries()) {
    if (color && piece.color !== color) {
      continue;
    }

    n = n | Bitmasks[squareLabel(square)];
  }

  return n;
};
